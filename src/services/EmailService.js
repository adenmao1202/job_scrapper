const nodemailer = require('nodemailer');
const { logger } = require('../utils/logger');

class EmailService {
  constructor() {
    // Load environment variables
    require('dotenv').config();
    
    this.isEnabled = process.env.ENABLE_NOTIFICATIONS === 'true';
    this.transporter = null;
    
    if (this.isEnabled) {
      this.initializeTransporter();
    }
  }

  initializeTransporter() {
    try {
      this.transporter = nodemailer.createTransport({
        host: process.env.SMTP_HOST || 'smtp.gmail.com',
        port: parseInt(process.env.SMTP_PORT) || 587,
        secure: false, // true for 465, false for other ports
        auth: {
          user: process.env.SMTP_USER,
          pass: process.env.SMTP_PASS
        }
      });
      
      logger.info('‚úÖ Email service initialized');
    } catch (error) {
      logger.error('‚ùå Email service initialization failed:', error.message);
      this.isEnabled = false;
    }
  }

  async sendJobSummary(stats) {
    if (!this.isEnabled || !this.transporter) {
      logger.info('üìß Email notifications disabled');
      return;
    }

    if (!process.env.NOTIFICATION_EMAIL) {
      logger.warn('‚ö†Ô∏è No notification email configured');
      return;
    }

    try {
      const mailOptions = {
        from: process.env.SMTP_USER,
        to: process.env.NOTIFICATION_EMAIL,
        subject: `üîç Job Scraper Report - ${stats.newJobs} New Jobs Found`,
        html: this.generateEmailTemplate(stats)
      };

      const info = await this.transporter.sendMail(mailOptions);
      logger.info(`üìß Email sent successfully: ${info.messageId}`);
      
    } catch (error) {
      logger.error('‚ùå Failed to send email:', error.message);
    }
  }

  generateEmailTemplate(stats) {
    const timestamp = new Date().toLocaleString();
    
    return `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <h2 style="color: #2c3e50;">üîç Job Collection Summary</h2>
        
        <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #27ae60; margin-top: 0;">‚úÖ Collection Completed</h3>
          <p><strong>Timestamp:</strong> ${timestamp}</p>
          <p><strong>New Jobs Found:</strong> <span style="color: #e74c3c; font-size: 18px; font-weight: bold;">${stats.newJobs}</span></p>
          <p><strong>Total Jobs Processed:</strong> ${stats.processed}</p>
          <p><strong>Errors:</strong> ${stats.errors || 0}</p>
        </div>

        ${stats.databaseStats ? `
        <div style="background-color: #e8f4f8; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #2980b9; margin-top: 0;">üìä Database Statistics</h3>
          <p><strong>Total Jobs in Database:</strong> ${stats.databaseStats.total_jobs}</p>
          <p><strong>Unique Companies:</strong> ${stats.databaseStats.unique_companies}</p>
          <p><strong>Categories:</strong> ${stats.databaseStats.unique_categories}</p>
          <p><strong>Jobs Added Today:</strong> ${stats.databaseStats.jobs_today}</p>
        </div>
        ` : ''}

        <div style="background-color: #fff3cd; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #856404; margin-top: 0;">üîó Quick Actions</h3>
          <p>
            <a href="https://docs.google.com/spreadsheets/d/${process.env.GOOGLE_SHEET_ID}/edit" 
               style="background-color: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; display: inline-block; margin: 5px;">
              üì± View Google Sheet
            </a>
          </p>
          <p>
            <small style="color: #6c757d;">
              üí° The job scraper runs automatically every 2 hours. 
              Next collection will be at ${new Date(Date.now() + 2 * 60 * 60 * 1000).toLocaleString()}.
            </small>
          </p>
        </div>

        <hr style="margin: 30px 0; border: none; border-top: 1px solid #dee2e6;">
        
        <div style="text-align: center; color: #6c757d; font-size: 14px;">
          <p>ü§ñ Automated Job Scraper</p>
          <p>Generated by your LinkedIn job collection system</p>
        </div>
      </div>
    `;
  }

  async testConnection() {
    if (!this.isEnabled || !this.transporter) {
      return false;
    }

    try {
      await this.transporter.verify();
      logger.info('‚úÖ Email connection verified');
      return true;
    } catch (error) {
      logger.error('‚ùå Email connection failed:', error.message);
      return false;
    }
  }
}

module.exports = EmailService;